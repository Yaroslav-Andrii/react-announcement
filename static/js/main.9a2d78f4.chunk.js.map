{"version":3,"sources":["data/types.js","components/AnnouncementFrom.jsx","data/announcementsActions.js","components/SearchForm.jsx","components/AnnouncementList.jsx","components/AnnouncementChangeFrom.jsx","components/SameAnnouncements.jsx","components/Confirm.jsx","components/Announcement.jsx","components/NavBar.jsx","components/NotFoundPage.jsx","App.js","serviceWorker.js","data/announcementReducer.js","data/rootReducer.js","index.js"],"names":["ADD","DELETE","UPDATE","AnnouncementForm","dispatch","useDispatch","useState","redirectState","setRedirectState","title","description","formState","setFromState","event","target","id","value","useFormState","setFormChange","alert","setAlert","to","className","role","onSubmit","preventDefault","trim","announcement","newAnnouncement","Date","now","date","toLocaleDateString","localStorage","setItem","JSON","stringify","type","payload","addAnnouncement","htmlFor","onChange","rows","SearchForm","filter","e","placeholder","AnnouncementList","announcements","useSelector","state","announcementState","announcemetsList","setAnnouncemetsList","searchString","toLowerCase","indexOf","length","map","key","AnnouncementChangeFrom","modeSwitcher","setAnnouncemetn","inputHandler","name","updatedAnnouncement","SameAnnouncements","parentId","sameListLength","sameAnnouncemetsList","item","replaceRegExp","wordSetX","replace","split","wordSetY","some","includes","Confirm","message","callback","clickHandler","aria-label","onClick","Announcement","match","find","params","changeMode","setChangeMode","useModeState","switchModeState","isConfirm","setConfirm","response","announcementId","removeItem","NavBar","data-toggle","data-target","aria-controls","aria-expanded","activeClassName","exact","NotFoundPage","root","App","path","component","Boolean","window","location","hostname","handlers","DEFAULT","action","initalState","Object","values","parse","rootReducer","combineReducers","handle","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.9a2d78f4.chunk.js","sourcesContent":["export const ADD = 'ANNOUNCEMENT_ADD';\r\nexport const DELETE = 'ANNOUNCEMENT_DELETE';\r\nexport const UPDATE = 'ANNOUNCEMENT_UPDATE';","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addAnnouncement } from '../data/announcementsActions';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport const AnnouncementForm = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [redirectState, setRedirectState] = useState(false);\r\n  const [formState, setFormChange] = useFormState();\r\n  \r\n  const [alert, setAlert] = useState('');\r\n  \r\n  function submitHandler(event) {\r\n    event.preventDefault();\r\n\r\n    if (formState.title.trim() && formState.description.trim()) {\r\n      dispatch( addAnnouncement(formState) );\r\n      setRedirectState(true);\r\n    } else {\r\n      setAlert('Some field is empty! Fill all fields for create announcement');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n    { redirectState && <Redirect to=\"/\"/> }\r\n    <h3 className=\"mt-2 mb-4 text-center\">Create new announcement!</h3>\r\n\r\n    { \r\n      alert \r\n      ? \r\n        <div className=\"alert alert-warning\" role=\"alert\">\r\n          {alert}\r\n        </div>\r\n      : \r\n        null\r\n    }\r\n\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"title\">Title</label>\r\n        <input \r\n          className=\"form-control\"\r\n          onChange={setFormChange} \r\n          id=\"title\" \r\n          type=\"text\" \r\n          value={formState.title}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"description\">Description</label>\r\n        <textarea \r\n          className=\"form-control\"\r\n          onChange={setFormChange} \r\n          id=\"description\"\r\n          value={formState.description}\r\n          rows=\"10\"\r\n        >\r\n        </textarea>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <button className=\"btn btn-primary float-right\" type=\"submit\">Add announcement</button>\r\n      </div>\r\n    </form>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction useFormState() {\r\n  const initialFormState = {title: '', description: ''};\r\n  const [formState, setFromState] = useState(initialFormState);\r\n  function inputChange(event) {\r\n    setFromState({\r\n      ...formState, \r\n      [event.target.id]: event.target.value\r\n    });\r\n  }\r\n\r\n  return [formState, inputChange];\r\n}","import { ADD, DELETE, UPDATE } from \"./types\"\r\n\r\nexport const addAnnouncement = announcement => {\r\n\r\n  const newAnnouncement = {\r\n    id: Date.now(),\r\n    title: announcement.title,\r\n    description: announcement.description,\r\n    date: new Date().toLocaleDateString(),\r\n  }\r\n\r\n  localStorage.setItem(newAnnouncement.id, JSON.stringify(newAnnouncement));\r\n\r\n  return {\r\n    type: ADD,\r\n    payload: newAnnouncement,\r\n  }\r\n}\r\n\r\nexport const deleteAnnouncement = announcementId => {\r\n  localStorage.removeItem(announcementId);\r\n\r\n  return {\r\n    type: DELETE,\r\n    payload: announcementId\r\n  }\r\n}\r\n\r\nexport const updateAnnouncement = updatedAnnouncement => {\r\n  updatedAnnouncement.date = new Date().toLocaleDateString();\r\n  localStorage.setItem(updatedAnnouncement.id, JSON.stringify(updatedAnnouncement));\r\n\r\n  return {\r\n    type: UPDATE,\r\n    payload: updatedAnnouncement,\r\n  }\r\n}","import React from 'react';\r\n\r\nexport const SearchForm = ({filter}) => {\r\n  return (\r\n    <form className=\"mt-3 search-form\">\r\n      <div className=\"form-group\">\r\n      <input \r\n        className=\"p-2\"\r\n        id=\"serchInput\" \r\n        onChange={e => filter(e.target.value)} \r\n        type=\"text\" \r\n        placeholder=\"What do you search?\"\r\n      />\r\n      </div>\r\n    </form>\r\n  );\r\n}","import React, {  useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { SearchForm } from './SearchForm';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport const AnnouncementList = () => {\r\n  const announcements = useSelector(state => state.announcementState.announcements);\r\n  const [announcemetsList, setAnnouncemetsList] = useState(announcements);\r\n  \r\n  const searchHandler = searchString => {\r\n    setAnnouncemetsList(\r\n      announcements.filter(announcement => {\r\n        return ~announcement.title\r\n          .toLowerCase()\r\n          .indexOf(searchString.toLowerCase())\r\n      })\r\n    );\r\n  }\r\n\r\n  return (  \r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <SearchForm filter={searchHandler}/>\r\n      </div>\r\n      <div className=\"row\">\r\n        <ul className=\"list-group announcements-list\">\r\n          {\r\n            announcemetsList.length \r\n            ?\r\n            announcemetsList.map(announcement => {\r\n                return (\r\n                  <li className=\"list-group-item list-group-item-action\" key={announcement.id}>\r\n                    <NavLink to={`/announcement/${announcement.id}`}>{announcement.title}</NavLink>\r\n                  </li>)\r\n              }) \r\n            : \r\n              \"List of announcements is empty\"\r\n          }\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { updateAnnouncement } from '../data/announcementsActions';\r\n\r\nexport const AnnouncementChangeFrom = ({title, description, id, modeSwitcher}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [alert, setAlert] = useState('');\r\n\r\n  const [announcement, setAnnouncemetn] = useState({title, description, id});\r\n  function inputHandler(event) {\r\n    setAnnouncemetn({\r\n      ...announcement,\r\n      [event.target.name]: event.target.value\r\n    })\r\n  }\r\n\r\n  function submitHandler(event) {\r\n    event.preventDefault();\r\n    if (announcement.title.trim() && announcement.description.trim()) {\r\n      dispatch( updateAnnouncement(announcement) );\r\n      modeSwitcher();\r\n    } else {\r\n      setAlert(\"Field can't be empty!\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n    { \r\n      alert \r\n      ? \r\n        <div className=\"alert alert-warning mt-2\" role=\"alert\">\r\n          {alert}\r\n        </div>\r\n      : \r\n        null\r\n    }\r\n    <form className=\"mt-2\" onSubmit={submitHandler}>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"title\">Title</label>\r\n        <input \r\n          id=\"title\" \r\n          type=\"text\" \r\n          name=\"title\" \r\n          onChange={inputHandler} \r\n          value={announcement.title}\r\n          className=\"form-control\"  \r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"description\">Description</label>\r\n        <textarea \r\n          name=\"description\" \r\n          onChange={inputHandler} \r\n          value={announcement.description}\r\n          id=\"description\"\r\n          className=\"form-control\"\r\n          rows=\"10\"\r\n        >\r\n        </textarea>\r\n      </div>\r\n      <div className=\"form-group\"><button className=\"btn btn-success btn-sm\" type=\"submit\">SAVE</button></div>\r\n      \r\n    </form>\r\n    </>\r\n  )\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport const SameAnnouncements = ({ title, parentId, sameListLength = 3 }) => {\r\n  const sameAnnouncemetsList = useSelector( ({ announcementState: {announcements} }) => {\r\n    return announcements.filter(item => {\r\n      if (item.id !== parentId) {\r\n        const replaceRegExp = /[!?.,-/+{}()]/g\r\n\r\n        const wordSetX = item.title.replace(replaceRegExp, '').split(' ').filter(item => item !== \"\");\r\n        const wordSetY = title.replace(replaceRegExp, '').split(' ').filter(item => item !== \"\");\r\n\r\n        return wordSetX.some(item => wordSetY.includes(item));\r\n      } \r\n      return false;\r\n    })\r\n  })\r\n\r\n  if (sameAnnouncemetsList.length > sameListLength) {\r\n    sameAnnouncemetsList.length = sameListLength;\r\n  }\r\n  \r\n  return (\r\n    <ul className=\"list-group announcements-list mt-5\">\r\n      {\r\n        sameAnnouncemetsList.length \r\n        ?\r\n        sameAnnouncemetsList.map(announcement => {\r\n          return (\r\n            <li className=\"list-group-item list-group-item-action\" key={announcement.id}>\r\n              <NavLink to={`/announcement/${announcement.id}`}>{announcement.title}</NavLink>\r\n            </li>)\r\n          }) \r\n        :             \r\n          null\r\n      }\r\n    </ul>\r\n  )\r\n}","import React from 'react';\r\n\r\nexport const Confirm = ({message, callback}) => {\r\n\r\n  function clickHandler(event) {\r\n    event.target.name === \"true\" ? callback(true) : callback(false);\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <div className=\"alert alert-danger mt-2\" role=\"alert\">{message}</div>\r\n\r\n    <div className=\"btn-group float-right btn-group-sm\" role=\"group\" aria-label=\"Basic example\">\r\n      <button className=\"btn btn-danger\" onClick={clickHandler} name=\"true\">Yes</button>\r\n      <button className=\"btn btn-secondary\" onClick={clickHandler} name=\"false\">No</button>\r\n    </div>\r\n    <div className=\"clearfix\"></div>\r\n    </>\r\n  )\r\n}","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AnnouncementChangeFrom } from './AnnouncementChangeFrom';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { deleteAnnouncement } from '../data/announcementsActions';\r\nimport { SameAnnouncements } from './SameAnnouncements';\r\nimport { Confirm } from './Confirm';\r\n\r\nexport const Announcement = ({ match }) => {\r\n  const dispatch = useDispatch();\r\n  const { title, description, date, id } = useSelector( ({ announcementState: {announcements} }) => {\r\n    const announcement = announcements.find(announcement => announcement.id === +match.params.id);\r\n    return announcement || {title: '', description: '', date: '', id: ''};\r\n  } )\r\n\r\n  const [redirectState, setRedirectState] = useState(false);\r\n  const [changeMode, switchModeState] = useModeState();\r\n\r\n  const [isConfirm, setConfirm] = useState(false);\r\n\r\n  function deleteAnnouncementHandler() {\r\n    setConfirm(true);\r\n  }\r\n\r\n  function deleteAnnouncementCallback(response) {\r\n    if (response) {\r\n      setRedirectState(true);\r\n      dispatch( deleteAnnouncement(id) );\r\n    } else {\r\n      setConfirm(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n    \r\n    {isConfirm && <Confirm message=\"Do you really want to delete the announcement?\" callback={deleteAnnouncementCallback}/>}\r\n    {redirectState && <Redirect to=\"/\"/>}\r\n    {\r\n      changeMode \r\n      ? \r\n        <AnnouncementChangeFrom \r\n          modeSwitcher={switchModeState} \r\n          title={title} \r\n          description={description} \r\n          id={id}\r\n        />\r\n      :\r\n        <>\r\n        <h3 className=\"mt-2 mb-4 text-center\">{title}</h3>\r\n        <div className=\"text-justify mb-4 announcement-desc\">\r\n          <p>{description}</p>\r\n          <span className=\"float-right small\"><b>{date}</b></span>\r\n        </div>\r\n\r\n        <div className=\"btn-group\">\r\n          <button className=\"btn btn-info btn-sm\" onClick={switchModeState}>UPDATE</button>\r\n          <button className=\"btn btn-danger btn-sm\" onClick={deleteAnnouncementHandler}>DELETE</button>\r\n        </div>\r\n        </>\r\n    }\r\n    <SameAnnouncements title={title} parentId={id}/>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction useModeState() {\r\n  const [changeMode, setChangeMode] = useState(false);\r\n  function changeModeSwitcher() {\r\n    setChangeMode(state => !state);\r\n  }\r\n\r\n  return [changeMode, changeModeSwitcher]\r\n}","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport const NavBar = () => (\r\n  <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n    <span className=\"navbar-brand\">Announcements App</span>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav mr-auto\">\r\n        <li className=\"nav-item\">\r\n          <NavLink\r\n            className=\"nav-link\"\r\n            activeClassName='active'\r\n            to=\"/\"\r\n            exact\r\n          >\r\n            Announcements\r\n          </NavLink>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <NavLink\r\n            className=\"nav-link\"\r\n            activeClassName='active'\r\n            to=\"/create\"\r\n          >\r\n            New announcement\r\n          </NavLink>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n);","import React from 'react';\r\n\r\nexport const NotFoundPage = () => (\r\n  <h1>404</h1>\r\n)","import React from 'react';\nimport { Switch, Route, BrowserRouter } from 'react-router-dom';\nimport { AnnouncementForm } from './components/AnnouncementFrom';\nimport { AnnouncementList } from './components/AnnouncementList';\nimport { Announcement } from './components/Announcement';\nimport { NavBar } from './components/NavBar';\nimport { NotFoundPage } from './components/NotFoundPage';\n\nconst root = \"/react-announcement/\"\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <NavBar/>\n      <div className=\"container\">\n        <Switch>\n          <Route path={root} exact component={AnnouncementList}/>\n          <Route path={`${root}create`} component={AnnouncementForm}/>\n          <Route path={`${root}announcement/:id`} component={Announcement}/>\n          <Route path={'*'} component={NotFoundPage}/>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ADD, DELETE, UPDATE } from \"./types\";\r\n\r\nconst handlers = {\r\n  DEFAULT: state => state,\r\n  [ADD]: (state, action) => ({announcements: [...state.announcements, action.payload]}),\r\n  [DELETE]: (state, action) => ({\r\n    announcements: state.announcements.filter(item => item.id !== action.payload)\r\n  }),\r\n  [UPDATE]: (state, action) => ({ \r\n    announcements: state.announcements.map(item => item.id === action.payload.id ? action.payload : item)\r\n  })\r\n}\r\n\r\nconst initalState = getInitialState();\r\n\r\nexport function announcementReducer(state = initalState, action) {\r\n  const handle = handlers[action.type] || handlers.DEFAULT;\r\n  return handle(state, action);\r\n}\r\n\r\nfunction getInitialState() {\r\n  return { announcements: Object.values(localStorage).map(item => JSON.parse(item)) };\r\n}","import { combineReducers } from \"redux\";\r\nimport { announcementReducer } from \"./announcementReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  announcementState: announcementReducer,\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { rootReducer } from './data/rootReducer';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}